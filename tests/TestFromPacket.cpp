#include <QTest>

#include <qmdnsengine/dns.h>
#include <qmdnsengine/record.h>
#include <qmdnsengine/message.h>

unsigned char b0[] = {
    0x00, 0x00, 0x84, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x04,
    0x10, 0x5f, 0x75, 0x6e, 0x69, 0x70, 0x72, 0x6f, 0x2d, 0x6c, 0x61, 0x70,
    0x74, 0x69, 0x6d, 0x65, 0x72, 0x04, 0x5f, 0x74, 0x63, 0x70, 0x05, 0x6c,
    0x6f, 0x63, 0x61, 0x6c, 0x00, 0x00, 0x0c, 0x00, 0x01, 0x00, 0x00, 0x11,
    0x94, 0x00, 0x0e, 0x0b, 0x75, 0x6e, 0x69, 0x67, 0x6f, 0x2d, 0x31, 0x32,
    0x33, 0x34, 0x35, 0xc0, 0x0c, 0xc0, 0x33, 0x00, 0x21, 0x80, 0x01, 0x00,
    0x00, 0x00, 0x78, 0x00, 0x14, 0x00, 0x00, 0x00, 0x00, 0x1f, 0x90, 0x0b,
    0x75, 0x6e, 0x69, 0x67, 0x6f, 0x2d, 0x31, 0x32, 0x33, 0x34, 0x35, 0xc0,
    0x22, 0xc0, 0x53, 0x00, 0x2f, 0x80, 0x01, 0x00, 0x00, 0x11, 0x94, 0x00,
    0x0a, 0xc0, 0x53, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x08, 0xc0,
    0x53, 0x00, 0x01, 0x80, 0x01, 0x00, 0x00, 0x00, 0x78, 0x00, 0x04, 0xc0,
    0xa8, 0x32, 0x45, 0xc0, 0x33, 0x00, 0x10, 0x80, 0x01, 0x00, 0x00, 0x11,
    0x94, 0x00, 0x3d, 0x10, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x3d, 0x55, 0x6e,
    0x69, 0x70, 0x72, 0x6f, 0x20, 0x41, 0x70, 0x73, 0x07, 0x44, 0x72, 0x69,
    0x76, 0x65, 0x72, 0x3d, 0x0f, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x3d, 0x55,
    0x6e, 0x69, 0x47, 0x6f, 0x20, 0x4f, 0x6e, 0x65, 0x13, 0x73, 0x65, 0x72,
    0x69, 0x61, 0x6c, 0x2d, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x3d, 0x31,
    0x32, 0x33, 0x34, 0x35
};


class TestFromPacket : public QObject
{
    Q_OBJECT

private Q_SLOTS:

    void testParseB0();
};



void TestFromPacket::testParseB0()
{
    /* This code mimics
     * void ServerPrivate::onReadyRead()
     *    ...
     *    socket->readDatagram(packet.data(), packet.size(), &address, &port);
     */

    QByteArray packet = QByteArray::fromRawData(
                (const char *)b0, sizeof(b0));

    QMdnsEngine::Message message;

    QVERIFY(fromPacket(packet, message));
}


QTEST_MAIN(TestFromPacket)
#include "TestFromPacket.moc"
